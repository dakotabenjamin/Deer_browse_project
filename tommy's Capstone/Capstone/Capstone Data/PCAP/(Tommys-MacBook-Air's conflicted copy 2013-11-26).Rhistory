NumberOfAdults2013 <- tapply(data2013_Living$DBH[data2013_Living$DBH>DBH_Threshold],data2013_Living$Species[data2013_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2013 <- tapply(data2013_Living$DBH[data2013_Living$DBH<= DBH_Threshold],data2013_Living$Species[data2013_Living$DBH<= DBH_Threshold],length)
TotalAdults2013 <- sum(NumberOfAdults2013,na.rm=TRUE)
TotalSaplings2013 <- sum(NumberOfSaplings2013,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2013 <- NumberOfAdults2013/TotalAdults2013
PropSaplings2013 <- NumberOfSaplings2013/TotalSaplings2013
ProjectionMatrix2013 <- matrix(rep(NA,17*17),nrow=17,byrow=FALSE)  #Intitialize an empty matrix
for (i in 1:17)  {
ProjectionMatrix2013[,i] <- matrix(PropSaplings2013,nrow=17,byrow=FALSE)  #Fill the matrix with proportion replacement
}
#Replace NA w/ 0:
ProjectionMatrix2013[is.na(ProjectionMatrix2013)] <- 0
#sum(ProjectionMatrix2013,na.rm=TRUE)  # Check that each column adds to 1 (Total for the matrix will be 17)
#sum(ProjectionMatrix2013[,1],na.rm=TRUE)  # Check that probabilities add to 1
###ANALYZE THE PROJECTION MATRIX:
IntialSpeciesComposition2013 <- NumberOfAdults2013
NGen <- 10 #Number of generations
SpeciesCompVector2013 <- matrix(rep(0,(NGen+1)*17),nrow=17,byrow=TRUE)
SpeciesCompVector2013[,1] <- IntialSpeciesComposition2013
SpeciesCompVector2013[is.na(SpeciesCompVector2013)] <- 0  #Replace in NAs in this vector with 0.
for (i in 2:NGen) {
SpeciesCompVector2013[,i] <- as.integer(ProjectionMatrix2013%*%SpeciesCompVector2013[,i-1])  #Project forward in time.
}
sum(ProjectionMatrix2013,na.rm=TRUE)	#Check to see whether the columns sum to 1.
#Graph the results:
Final <- NGen+1
Time <- 1:Final
plot(Time,SpeciesCompVector2013[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2013,na.rm=TRUE)),xlab="Year",ylab="Abundance",bty="L",pch=1,tcl=0.2)
for (i in 2:17)  {
points(Time,SpeciesCompVector2013[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2013,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#Let's say we want to extract only the data from 2011 and place it in a dataframe "data2011":
data2011 <- data.frame(masterdata$Plot[masterdata$Year=="2011"],masterdata$Tag[masterdata$Year=="2011"],masterdata$Species[masterdata$Year=="2011"],masterdata$DBH[masterdata$Year=="2011"],masterdata$Living[masterdata$Year=="2011"])
names(data2011) <- c("Plot","Tag","Species","DBH","Living")
summary(data2011)
length(data2011$Tag)
#Let's also say that we want to extract only the living trees:
data2011_Living <- data.frame(data2011$Plot[data2011$Living=="1"], data2011$Tag[data2011$Living=="1"],data2011$Species[data2011$Living=="1"], data2011$DBH[data2011$Living=="1"])
names(data2011_Living) <- c("Plot","Tag","Species","DBH")
summary(data2011_Living)
length(data2011_Living$Tag)
#Observe the current community composition:
#Convert DBH into a numberic variable rather than factor.
data2011_Living$DBH <-as.character(data2011_Living$DBH)
data2011_Living$DBH <-as.numeric((data2011_Living$DBH),na.rm=TRUE)
NumberOfAdults2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH>DBH_Threshold], data2011_Living$Species[data2011_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH<=DBH_Threshold], data2011_Living$Species[data2011_Living$DBH<= DBH_Threshold],length)
TotalAdults2011 <- sum(NumberOfAdults2011,na.rm=TRUE)
TotalSaplings2011 <- sum(NumberOfSaplings2011,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2011 <- NumberOfAdults2011/TotalAdults2011
PropSaplings2011 <- NumberOfSaplings2011/TotalSaplings2011
#Now you try graphing the 2011 result.
#Next, try this for the data you collected this year!
plot(Time,SpeciesCompVector2013[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2013,na.rm=TRUE)),xlab="Year",ylab="Abundance",bty="L",pch=1,tcl=0.2, main = "2013 Projection")
for (i in 2:17)  {
points(Time,SpeciesCompVector2013[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2013,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#TREE DEMOGRAPHY CODE FOR PRINCIPLES IN ECOLOGY LAB, BIOL351L/451L
#ENTER THE DATA:
masterdata <- read.table("~/Documents/Teaching/Ecology_2006/Lab_2006/Forest_structure_lab/Data/Master_Data_2006.txt",header=TRUE)
#User will need to update the Master data file with this year's data, and then update the file path to where this file is located on your computer.
#On a PC, change directories to the directory where you saved this file, under the File menu, change dir.  Then enter the data using:  masterdata <- read.table("Master_Data_2006.txt",header=TRUE)
masterdata <- data.frame(masterdata)  #Convert the newly imported data to a dataframe.
summary(masterdata)  #Here we see a summary of the new dataframe.
length(masterdata$Tag)  #How many rows is this dataframe?
###SOME TAXA WERE UNIDENTIFIED.  REMOVE THEM FROM THE DATAFRAME FOR ANALYSIS:
masterdata <- na.omit(masterdata)
#Let's say we want to extract only the data from 2006 and place it in a dataframe "data2006":
data2006 <- data.frame(masterdata$Plot[masterdata$Year=="2006"],masterdata$Tag[masterdata$Year=="2006"],masterdata$Species[masterdata$Year=="2006"],masterdata$DBH[masterdata$Year=="2006"],masterdata$Living[masterdata$Year=="2006"])
names(data2006) <- c("Plot","Tag","Species","DBH","Living")  #Renames the columns.
summary(data2006)
length(data2006$Tag)  #Here we are checking to make sure that we have a subset of the original data
#Let's also say that we want to extract only the living trees from 2006, and place them in a dataframe we'll call "data2006_Living"
data2006_Living <- data.frame(data2006$Plot[data2006$Living=="1"],data2006$Tag[data2006$Living=="1"],data2006$Species[data2006$Living=="1"], data2006$DBH[data2006$Living=="1"])
names(data2006_Living) <- c("Plot","Tag","Species","DBH")
summary(data2006_Living)
length(data2006_Living$Tag) #Here we are checking to make sure that we have a subset of the original data
#One question we might ask about the community assemblage is how might we predict the community composition of this forest to change in the near future?  We can use a markov matrix projection (similar in structure to a demographic matrix model) to ask how we might predict the composition of the forest to change over time.  Cells in this matrix describe the probability of transitioning from one tree type to another, based on the proportion of saplings in the community of each species type.
#Let's create a vector with some focal species, for which we will create a markov projection matrix.
SpeciesNames <- c("acru","acsa","caca","caco","caov","crsp","fagr","fram","litu","maac","nysy","osvi","prse","qual","quru","saal","ulru")
#We want to know what number of individuals at the site were adults of each species in 2006, and what number were seedlings, within each plot.  We'll use the proportion of saplings as a metric of the probability of replacement for each adult.
#We also need to decide on a size cutoff.  What DBH will indicate "saplings" versus "adults" for us?
DBH_Threshold <- 3  #This is a somewhat arbitrary number, which you might choose to manipulate, and see if the results depend on the choice of threshold.
#Convert DBH into a numberic variable rather than factor.
data2006_Living$DBH <-as.character(data2006_Living$DBH)
data2006_Living$DBH <-as.numeric((data2006_Living$DBH),na.rm=TRUE)
NumberOfAdults2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH>DBH_Threshold],data2006_Living$Species[data2006_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH<= DBH_Threshold],data2006_Living$Species[data2006_Living$DBH<= DBH_Threshold],length)
TotalAdults2006 <- sum(NumberOfAdults2006,na.rm=TRUE)
TotalSaplings2006 <- sum(NumberOfSaplings2006,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2006 <- NumberOfAdults2006/TotalAdults2006
PropSaplings2006 <- NumberOfSaplings2006/TotalSaplings2006
ProjectionMatrix2006 <- matrix(rep(NA,17*17),nrow=17,byrow=FALSE)  #Intitialize an empty matrix
for (i in 1:17)  {
ProjectionMatrix2006[,i] <- matrix(PropSaplings2006,nrow=17,byrow=FALSE)  #Fill the matrix with proportion replacement
}
#Replace NA w/ 0:
ProjectionMatrix2006[is.na(ProjectionMatrix2006)] <- 0
#sum(ProjectionMatrix2006,na.rm=TRUE)  # Check that each column adds to 1 (Total for the matrix will be 17)
#sum(ProjectionMatrix2006[,1],na.rm=TRUE)  # Check that probabilities add to 1
###ANALYZE THE PROJECTION MATRIX:
IntialSpeciesComposition2006 <- NumberOfAdults2006
NGen <- 10 #Number of generations
SpeciesCompVector2006 <- matrix(rep(0,(NGen+1)*17),nrow=17,byrow=TRUE)
SpeciesCompVector2006[,1] <- IntialSpeciesComposition2006
SpeciesCompVector2006[is.na(SpeciesCompVector2006)] <- 0  #Replace in NAs in this vector with 0.
for (i in 2:NGen) {
SpeciesCompVector2006[,i] <- as.integer(ProjectionMatrix2006%*%SpeciesCompVector2006[,i-1])  #Project forward in time.
}
sum(ProjectionMatrix2006,na.rm=TRUE)	#Check to see whether the columns sum to 1.
#Graph the results:
Final <- NGen+1
Time <- 1:Final
plot(Time,SpeciesCompVector2006[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2006,na.rm=TRUE)),xlab="Generations",ylab="Abundance",bty="L",pch=1,tcl=0.2, main = "2011 Projection" )
for (i in 2:17)  {
points(Time,SpeciesCompVector2006[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2006,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#Let's say we want to extract only the data from 2011 and place it in a dataframe "data2011":
data2011 <- data.frame(masterdata$Plot[masterdata$Year=="2011"],masterdata$Tag[masterdata$Year=="2011"],masterdata$Species[masterdata$Year=="2011"],masterdata$DBH[masterdata$Year=="2011"],masterdata$Living[masterdata$Year=="2011"])
names(data2011) <- c("Plot","Tag","Species","DBH","Living")
summary(data2011)
length(data2011$Tag)
#Let's also say that we want to extract only the living trees:
data2011_Living <- data.frame(data2011$Plot[data2011$Living=="1"], data2011$Tag[data2011$Living=="1"],data2011$Species[data2011$Living=="1"], data2011$DBH[data2011$Living=="1"])
names(data2011_Living) <- c("Plot","Tag","Species","DBH")
summary(data2011_Living)
length(data2011_Living$Tag)
#Observe the current community composition:
#Convert DBH into a numberic variable rather than factor.
data2011_Living$DBH <-as.character(data2011_Living$DBH)
data2011_Living$DBH <-as.numeric((data2011_Living$DBH),na.rm=TRUE)
NumberOfAdults2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH>DBH_Threshold], data2011_Living$Species[data2011_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH<=DBH_Threshold], data2011_Living$Species[data2011_Living$DBH<= DBH_Threshold],length)
TotalAdults2011 <- sum(NumberOfAdults2011,na.rm=TRUE)
TotalSaplings2011 <- sum(NumberOfSaplings2011,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2011 <- NumberOfAdults2011/TotalAdults2011
PropSaplings2011 <- NumberOfSaplings2011/TotalSaplings2011
#Now you try graphing the 2011 result.
#Next, try this for the data you collected this year!
source('~/.active-rstudio-document')
#TREE DEMOGRAPHY CODE FOR PRINCIPLES IN ECOLOGY LAB, BIOL351L/451L
#ENTER THE DATA:
masterdata <- read.table("/Users/tommyschafer/Desktop//Tree Demography Lab/Master_Data_2013.txt",header=TRUE)
#User will need to update the Master data file with this year's data, and then update the file path to where this file is located on your computer.
#On a PC, change directories to the directory where you saved this file, under the File menu, change dir.  Then enter the data using:  masterdata <- read.table("Master_Data_2006.txt",header=TRUE)
masterdata <- data.frame(masterdata)  #Convert the newly imported data to a dataframe.
summary(masterdata)  #Here we see a summary of the new dataframe.
length(masterdata$Tag)  #How many rows is this dataframe?
###SOME TAXA WERE UNIDENTIFIED.  REMOVE THEM FROM THE DATAFRAME FOR ANALYSIS:
masterdata <- na.omit(masterdata)
#Let's say we want to extract only the data from 2006 and place it in a dataframe "data2006":
data2006 <- data.frame(masterdata$Plot[masterdata$Year=="2006"],masterdata$Tag[masterdata$Year=="2006"],masterdata$Species[masterdata$Year=="2006"],masterdata$DBH[masterdata$Year=="2006"],masterdata$Living[masterdata$Year=="2006"])
names(data2006) <- c("Plot","Tag","Species","DBH","Living")  #Renames the columns.
summary(data2006)
length(data2006$Tag)  #Here we are checking to make sure that we have a subset of the original data
#Let's also say that we want to extract only the living trees from 2006, and place them in a dataframe we'll call "data2006_Living"
data2006_Living <- data.frame(data2006$Plot[data2006$Living=="1"],data2006$Tag[data2006$Living=="1"],data2006$Species[data2006$Living=="1"], data2006$DBH[data2006$Living=="1"])
names(data2006_Living) <- c("Plot","Tag","Species","DBH")
summary(data2006_Living)
length(data2006_Living$Tag) #Here we are checking to make sure that we have a subset of the original data
#One question we might ask about the community assemblage is how might we predict the community composition of this forest to change in the near future?  We can use a markov matrix projection (similar in structure to a demographic matrix model) to ask how we might predict the composition of the forest to change over time.  Cells in this matrix describe the probability of transitioning from one tree type to another, based on the proportion of saplings in the community of each species type.
#Let's create a vector with some focal species, for which we will create a markov projection matrix.
SpeciesNames <- c("acru","acsa","caca","caco","caov","crsp","fagr","fram","litu","maac","nysy","osvi","prse","qual","quru","saal","ulru")
#We want to know what number of individuals at the site were adults of each species in 2006, and what number were seedlings, within each plot.  We'll use the proportion of saplings as a metric of the probability of replacement for each adult.
#We also need to decide on a size cutoff.  What DBH will indicate "saplings" versus "adults" for us?
DBH_Threshold <- 3  #This is a somewhat arbitrary number, which you might choose to manipulate, and see if the results depend on the choice of threshold.
#Convert DBH into a numberic variable rather than factor.
data2006_Living$DBH <-as.character(data2006_Living$DBH)
data2006_Living$DBH <-as.numeric((data2006_Living$DBH),na.rm=TRUE)
NumberOfAdults2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH>DBH_Threshold],data2006_Living$Species[data2006_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH<= DBH_Threshold],data2006_Living$Species[data2006_Living$DBH<= DBH_Threshold],length)
TotalAdults2006 <- sum(NumberOfAdults2006,na.rm=TRUE)
TotalSaplings2006 <- sum(NumberOfSaplings2006,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2006 <- NumberOfAdults2006/TotalAdults2006
PropSaplings2006 <- NumberOfSaplings2006/TotalSaplings2006
ProjectionMatrix2006 <- matrix(rep(NA,17*17),nrow=17,byrow=FALSE)  #Intitialize an empty matrix
for (i in 1:17)  {
ProjectionMatrix2006[,i] <- matrix(PropSaplings2006,nrow=17,byrow=FALSE)  #Fill the matrix with proportion replacement
}
#Replace NA w/ 0:
ProjectionMatrix2006[is.na(ProjectionMatrix2006)] <- 0
#sum(ProjectionMatrix2006,na.rm=TRUE)  # Check that each column adds to 1 (Total for the matrix will be 17)
#sum(ProjectionMatrix2006[,1],na.rm=TRUE)  # Check that probabilities add to 1
###ANALYZE THE PROJECTION MATRIX:
IntialSpeciesComposition2006 <- NumberOfAdults2006
NGen <- 10 #Number of generations
SpeciesCompVector2006 <- matrix(rep(0,(NGen+1)*17),nrow=17,byrow=TRUE)
SpeciesCompVector2006[,1] <- IntialSpeciesComposition2006
SpeciesCompVector2006[is.na(SpeciesCompVector2006)] <- 0  #Replace in NAs in this vector with 0.
for (i in 2:NGen) {
SpeciesCompVector2006[,i] <- as.integer(ProjectionMatrix2006%*%SpeciesCompVector2006[,i-1])  #Project forward in time.
}
sum(ProjectionMatrix2006,na.rm=TRUE)	#Check to see whether the columns sum to 1.
#Graph the results:
Final <- NGen+1
Time <- 1:Final
plot(Time,SpeciesCompVector2006[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2006,na.rm=TRUE)),xlab="Generations",ylab="Abundance",bty="L",pch=1,tcl=0.2, main = "2011 Projection" )
for (i in 2:17)  {
points(Time,SpeciesCompVector2006[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2006,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#Let's say we want to extract only the data from 2011 and place it in a dataframe "data2011":
data2011 <- data.frame(masterdata$Plot[masterdata$Year=="2011"],masterdata$Tag[masterdata$Year=="2011"],masterdata$Species[masterdata$Year=="2011"],masterdata$DBH[masterdata$Year=="2011"],masterdata$Living[masterdata$Year=="2011"])
names(data2011) <- c("Plot","Tag","Species","DBH","Living")
summary(data2011)
length(data2011$Tag)
#Let's also say that we want to extract only the living trees:
data2011_Living <- data.frame(data2011$Plot[data2011$Living=="1"], data2011$Tag[data2011$Living=="1"],data2011$Species[data2011$Living=="1"], data2011$DBH[data2011$Living=="1"])
names(data2011_Living) <- c("Plot","Tag","Species","DBH")
summary(data2011_Living)
length(data2011_Living$Tag)
#Observe the current community composition:
#Convert DBH into a numberic variable rather than factor.
data2011_Living$DBH <-as.character(data2011_Living$DBH)
data2011_Living$DBH <-as.numeric((data2011_Living$DBH),na.rm=TRUE)
NumberOfAdults2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH>DBH_Threshold], data2011_Living$Species[data2011_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH<=DBH_Threshold], data2011_Living$Species[data2011_Living$DBH<= DBH_Threshold],length)
TotalAdults2011 <- sum(NumberOfAdults2011,na.rm=TRUE)
TotalSaplings2011 <- sum(NumberOfSaplings2011,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2011 <- NumberOfAdults2011/TotalAdults2011
PropSaplings2011 <- NumberOfSaplings2011/TotalSaplings2011
#Now you try graphing the 2011 result.
#Next, try this for the data you collected this year!
#TREE DEMOGRAPHY CODE FOR PRINCIPLES IN ECOLOGY LAB, BIOL351L/451L
#ENTER THE DATA:
masterdata <- read.table("/Users/tommyschafer/Desktop//Tree Demography Lab/Master_Data_2013.txt",header=TRUE)
#User will need to update the Master data file with this year's data, and then update the file path to where this file is located on your computer.
#On a PC, change directories to the directory where you saved this file, under the File menu, change dir.  Then enter the data using:  masterdata <- read.table("Master_Data_2006.txt",header=TRUE)
masterdata <- data.frame(masterdata)  #Convert the newly imported data to a dataframe.
summary(masterdata)  #Here we see a summary of the new dataframe.
length(masterdata$Tag)  #How many rows is this dataframe?
###SOME TAXA WERE UNIDENTIFIED.  REMOVE THEM FROM THE DATAFRAME FOR ANALYSIS:
masterdata <- na.omit(masterdata)
#Let's say we want to extract only the data from 2006 and place it in a dataframe "data2006":
data2006 <- data.frame(masterdata$Plot[masterdata$Year=="2006"],masterdata$Tag[masterdata$Year=="2006"],masterdata$Species[masterdata$Year=="2006"],masterdata$DBH[masterdata$Year=="2006"],masterdata$Living[masterdata$Year=="2006"])
names(data2006) <- c("Plot","Tag","Species","DBH","Living")  #Renames the columns.
summary(data2006)
length(data2006$Tag)  #Here we are checking to make sure that we have a subset of the original data
#Let's also say that we want to extract only the living trees from 2006, and place them in a dataframe we'll call "data2006_Living"
data2006_Living <- data.frame(data2006$Plot[data2006$Living=="1"],data2006$Tag[data2006$Living=="1"],data2006$Species[data2006$Living=="1"], data2006$DBH[data2006$Living=="1"])
names(data2006_Living) <- c("Plot","Tag","Species","DBH")
summary(data2006_Living)
length(data2006_Living$Tag) #Here we are checking to make sure that we have a subset of the original data
#One question we might ask about the community assemblage is how might we predict the community composition of this forest to change in the near future?  We can use a markov matrix projection (similar in structure to a demographic matrix model) to ask how we might predict the composition of the forest to change over time.  Cells in this matrix describe the probability of transitioning from one tree type to another, based on the proportion of saplings in the community of each species type.
#Let's create a vector with some focal species, for which we will create a markov projection matrix.
SpeciesNames <- c("acru","acsa","caca","caco","caov","crsp","fagr","fram","litu","maac","nysy","osvi","prse","qual","quru","saal","ulru")
#We want to know what number of individuals at the site were adults of each species in 2006, and what number were seedlings, within each plot.  We'll use the proportion of saplings as a metric of the probability of replacement for each adult.
#We also need to decide on a size cutoff.  What DBH will indicate "saplings" versus "adults" for us?
DBH_Threshold <- 3  #This is a somewhat arbitrary number, which you might choose to manipulate, and see if the results depend on the choice of threshold.
#Convert DBH into a numberic variable rather than factor.
data2006_Living$DBH <-as.character(data2006_Living$DBH)
data2006_Living$DBH <-as.numeric((data2006_Living$DBH),na.rm=TRUE)
NumberOfAdults2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH>DBH_Threshold],data2006_Living$Species[data2006_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2006 <- tapply(data2006_Living$DBH[data2006_Living$DBH<= DBH_Threshold],data2006_Living$Species[data2006_Living$DBH<= DBH_Threshold],length)
TotalAdults2006 <- sum(NumberOfAdults2006,na.rm=TRUE)
TotalSaplings2006 <- sum(NumberOfSaplings2006,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2006 <- NumberOfAdults2006/TotalAdults2006
PropSaplings2006 <- NumberOfSaplings2006/TotalSaplings2006
ProjectionMatrix2006 <- matrix(rep(NA,17*17),nrow=17,byrow=FALSE)  #Intitialize an empty matrix
for (i in 1:17)  {
ProjectionMatrix2006[,i] <- matrix(PropSaplings2006,nrow=17,byrow=FALSE)  #Fill the matrix with proportion replacement
}
#Replace NA w/ 0:
ProjectionMatrix2006[is.na(ProjectionMatrix2006)] <- 0
#sum(ProjectionMatrix2006,na.rm=TRUE)  # Check that each column adds to 1 (Total for the matrix will be 17)
#sum(ProjectionMatrix2006[,1],na.rm=TRUE)  # Check that probabilities add to 1
###ANALYZE THE PROJECTION MATRIX:
IntialSpeciesComposition2006 <- NumberOfAdults2006
NGen <- 10 #Number of generations
SpeciesCompVector2006 <- matrix(rep(0,(NGen+1)*17),nrow=17,byrow=TRUE)
SpeciesCompVector2006[,1] <- IntialSpeciesComposition2006
SpeciesCompVector2006[is.na(SpeciesCompVector2006)] <- 0  #Replace in NAs in this vector with 0.
for (i in 2:NGen) {
SpeciesCompVector2006[,i] <- as.integer(ProjectionMatrix2006%*%SpeciesCompVector2006[,i-1])  #Project forward in time.
}
sum(ProjectionMatrix2006,na.rm=TRUE)	#Check to see whether the columns sum to 1.
#Graph the results:
Final <- NGen+1
Time <- 1:Final
plot(Time,SpeciesCompVector2006[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2006,na.rm=TRUE)),xlab="Generations",ylab="Abundance",bty="L",pch=1,tcl=0.2, main = "2006 Projection" )
for (i in 2:17)  {
points(Time,SpeciesCompVector2006[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2006,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#Let's say we want to extract only the data from 2011 and place it in a dataframe "data2011":
data2011 <- data.frame(masterdata$Plot[masterdata$Year=="2011"],masterdata$Tag[masterdata$Year=="2011"],masterdata$Species[masterdata$Year=="2011"],masterdata$DBH[masterdata$Year=="2011"],masterdata$Living[masterdata$Year=="2011"])
names(data2011) <- c("Plot","Tag","Species","DBH","Living")
summary(data2011)
length(data2011$Tag)
#Let's also say that we want to extract only the living trees:
data2011_Living <- data.frame(data2011$Plot[data2011$Living=="1"], data2011$Tag[data2011$Living=="1"],data2011$Species[data2011$Living=="1"], data2011$DBH[data2011$Living=="1"])
names(data2011_Living) <- c("Plot","Tag","Species","DBH")
summary(data2011_Living)
length(data2011_Living$Tag)
#Observe the current community composition:
#Convert DBH into a numberic variable rather than factor.
data2011_Living$DBH <-as.character(data2011_Living$DBH)
data2011_Living$DBH <-as.numeric((data2011_Living$DBH),na.rm=TRUE)
NumberOfAdults2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH>DBH_Threshold], data2011_Living$Species[data2011_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH<=DBH_Threshold], data2011_Living$Species[data2011_Living$DBH<= DBH_Threshold],length)
TotalAdults2011 <- sum(NumberOfAdults2011,na.rm=TRUE)
TotalSaplings2011 <- sum(NumberOfSaplings2011,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2011 <- NumberOfAdults2011/TotalAdults2011
PropSaplings2011 <- NumberOfSaplings2011/TotalSaplings2011
#Now you try graphing the 2011 result.
#Next, try this for the data you collected this year!
#TREE DEMOGRAPHY CODE FOR PRINCIPLES IN ECOLOGY LAB, BIOL351L/451L
#ENTER THE DATA:
masterdata <- read.table("/Users/tommyschafer/Desktop/Tree Demography Lab/Master_Data_2013.txt",header=TRUE)
#User will need to update the Master data file with this year's data, and then update the file path to where this file is located on your computer.
#On a PC, change directories to the directory where you saved this file, under the File menu, change dir.  Then enter the data using:  masterdata <- read.table("Master_Data_2013.txt",header=TRUE)
masterdata <- data.frame(masterdata)  #Convert the newly imported data to a dataframe.
summary(masterdata)  #Here we see a summary of the new dataframe.
length(masterdata$Tag)  #How many rows is this dataframe?
###SOME TAXA WERE UNIDENTIFIED.  REMOVE THEM FROM THE DATAFRAME FOR ANALYSIS:
masterdata <- na.omit(masterdata)
#Let's say we want to extract only the data from 2013 and place it in a dataframe "data2013":
data2013 <- data.frame(masterdata$Plot[masterdata$Year=="2013"],masterdata$Tag[masterdata$Year=="2013"],masterdata$Species[masterdata$Year=="2013"],masterdata$DBH[masterdata$Year=="2013"],masterdata$Living[masterdata$Year=="2013"])
names(data2013) <- c("Plot","Tag","Species","DBH","Living")  #Renames the columns.
summary(data2013)
length(data2013$Tag)  #Here we are checking to make sure that we have a subset of the original data
#Let's also say that we want to extract only the living trees from 2013, and place them in a dataframe we'll call "data2013_Living"
data2013_Living <- data.frame(data2013$Plot[data2013$Living=="1"],data2013$Tag[data2013$Living=="1"],data2013$Species[data2013$Living=="1"], data2013$DBH[data2013$Living=="1"])
names(data2013_Living) <- c("Plot","Tag","Species","DBH")
summary(data2013_Living)
length(data2013_Living$Tag) #Here we are checking to make sure that we have a subset of the original data
#One question we might ask about the community assemblage is how might we predict the community composition of this forest to change in the near future?  We can use a markov matrix projection (similar in structure to a demographic matrix model) to ask how we might predict the composition of the forest to change over time.  Cells in this matrix describe the probability of transitioning from one tree type to another, based on the proportion of saplings in the community of each species type.
#Let's create a vector with some focal species, for which we will create a markov projection matrix.
SpeciesNames <- c("acru","acsa","caca","caco","caov","crsp","fagr","fram","litu","maac","nysy","osvi","prse","qual","quru","saal","ulru")
#We want to know what number of individuals at the site were adults of each species in 2013, and what number were seedlings, within each plot.  We'll use the proportion of saplings as a metric of the probability of replacement for each adult.
#We also need to decide on a size cutoff.  What DBH will indicate "saplings" versus "adults" for us?
DBH_Threshold <- 3  #This is a somewhat arbitrary number, which you might choose to manipulate, and see if the results depend on the choice of threshold.
#Convert DBH into a numberic variable rather than factor.
data2013_Living$DBH <-as.character(data2013_Living$DBH)
data2013_Living$DBH <-as.numeric((data2013_Living$DBH),na.rm=TRUE)
NumberOfAdults2013 <- tapply(data2013_Living$DBH[data2013_Living$DBH>DBH_Threshold],data2013_Living$Species[data2013_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2013 <- tapply(data2013_Living$DBH[data2013_Living$DBH<= DBH_Threshold],data2013_Living$Species[data2013_Living$DBH<= DBH_Threshold],length)
TotalAdults2013 <- sum(NumberOfAdults2013,na.rm=TRUE)
TotalSaplings2013 <- sum(NumberOfSaplings2013,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2013 <- NumberOfAdults2013/TotalAdults2013
PropSaplings2013 <- NumberOfSaplings2013/TotalSaplings2013
ProjectionMatrix2013 <- matrix(rep(NA,17*17),nrow=17,byrow=FALSE)  #Intitialize an empty matrix
for (i in 1:17)  {
ProjectionMatrix2013[,i] <- matrix(PropSaplings2013,nrow=17,byrow=FALSE)  #Fill the matrix with proportion replacement
}
#Replace NA w/ 0:
ProjectionMatrix2013[is.na(ProjectionMatrix2013)] <- 0
#sum(ProjectionMatrix2013,na.rm=TRUE)  # Check that each column adds to 1 (Total for the matrix will be 17)
#sum(ProjectionMatrix2013[,1],na.rm=TRUE)  # Check that probabilities add to 1
###ANALYZE THE PROJECTION MATRIX:
IntialSpeciesComposition2013 <- NumberOfAdults2013
NGen <- 10 #Number of generations
SpeciesCompVector2013 <- matrix(rep(0,(NGen+1)*17),nrow=17,byrow=TRUE)
SpeciesCompVector2013[,1] <- IntialSpeciesComposition2013
SpeciesCompVector2013[is.na(SpeciesCompVector2013)] <- 0  #Replace in NAs in this vector with 0.
for (i in 2:NGen) {
SpeciesCompVector2013[,i] <- as.integer(ProjectionMatrix2013%*%SpeciesCompVector2013[,i-1])  #Project forward in time.
}
sum(ProjectionMatrix2013,na.rm=TRUE)	#Check to see whether the columns sum to 1.
#Graph the results:
Final <- NGen+1
Time <- 1:Final
plot(Time,SpeciesCompVector2013[1,],xlim=c(0,Final+2),ylim=c(0,max(SpeciesCompVector2013,na.rm=TRUE)),xlab="Generations",ylab="Abundance",bty="L",pch=1,tcl=0.2, main = "2013 Projection")
for (i in 2:17)  {
points(Time,SpeciesCompVector2013[i,],pch=i)
}
legend(Final+1,max(SpeciesCompVector2013,na.rm=TRUE),pch=c(1:18),SpeciesNames,cex=0.8)
#Check out the 2011 data:
#Let's say we want to extract only the data from 2011 and place it in a dataframe "data2011":
data2011 <- data.frame(masterdata$Plot[masterdata$Year=="2011"],masterdata$Tag[masterdata$Year=="2011"],masterdata$Species[masterdata$Year=="2011"],masterdata$DBH[masterdata$Year=="2011"],masterdata$Living[masterdata$Year=="2011"])
names(data2011) <- c("Plot","Tag","Species","DBH","Living")
summary(data2011)
length(data2011$Tag)
#Let's also say that we want to extract only the living trees:
data2011_Living <- data.frame(data2011$Plot[data2011$Living=="1"], data2011$Tag[data2011$Living=="1"],data2011$Species[data2011$Living=="1"], data2011$DBH[data2011$Living=="1"])
names(data2011_Living) <- c("Plot","Tag","Species","DBH")
summary(data2011_Living)
length(data2011_Living$Tag)
#Observe the current community composition:
#Convert DBH into a numberic variable rather than factor.
data2011_Living$DBH <-as.character(data2011_Living$DBH)
data2011_Living$DBH <-as.numeric((data2011_Living$DBH),na.rm=TRUE)
NumberOfAdults2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH>DBH_Threshold], data2011_Living$Species[data2011_Living$DBH> DBH_Threshold],length)
NumberOfSaplings2011 <- tapply(data2011_Living$DBH[data2011_Living$DBH<=DBH_Threshold], data2011_Living$Species[data2011_Living$DBH<= DBH_Threshold],length)
TotalAdults2011 <- sum(NumberOfAdults2011,na.rm=TRUE)
TotalSaplings2011 <- sum(NumberOfSaplings2011,na.rm=TRUE)
#calculate the proportion of adults and saplings of each species:
PropAdults2011 <- NumberOfAdults2011/TotalAdults2011
PropSaplings2011 <- NumberOfSaplings2011/TotalSaplings2011
#Now you try graphing the 2011 result.
#Next, try this for the data you collected this year!
setwd("/Users/tommyschafer/Dropbox/CWRU Fall 2013/BIOL Capstone/Capstone/Capstone Data/PCAP")
# Install Libraries for Visual Use later
library(Hmisc)
library(scales)
library(png)
# Import Files
cover10 <- read.csv("pcap-cover-2010.csv")
cover11 <- read.csv("pcap-cover-2011.csv")
gis <- read.csv("pcap-gis-data.csv")
species <- read.csv("species-list-PCAP.csv")
# Bind Both years cover into one file called allcover
allcover <- rbind(cover10, cover11)
summary(allcover)
# Merge Species with allcover to have a full data file from hich to calculate richness of adventive, native, and total
alldata <- merge(allcover, species, by.x = "SPCODE", by.y = "SPCODE")
alldata <- merge(alldata, gis, by.x = "plot", by.y = "plot")
summary(alldata)
length(unique(alldata$plot))
# Create the experimental vector we are we need to experiment
# Calculate Distances from the GIS data and the point in cleveland we will be testing (This point is known as dead man's curve, an historical spot for cleveland)
# Use the reference GPS point (N 41.517880, W -81.674046)
# Make a new vector with the distance to the reference point of each plot using the Pythagorean Distance formula
alldata$distance <- (sqrt(((alldata$long - -81.674046))^2 + (alldata$lat - 41.517880)^2))
summary(alldata$distance)
# Now calculate the richness for each plot and dilute the reference frame to a plot based one (for native/adventive/total)
# Adventive and Native richness frame
attach(alldata)
richness <- aggregate(alldata$cover.mn, list(plot = plot, native = native, distance = distance, lat = lat, long = long), FUN = length)
detach(alldata)
summary(richness)
# rename the x columns created by aggregate
names(richness)[names(richness) == "x"] <- "rich"
summary(richness)
# Total Richness data frame
attach(alldata)
rich.total <- aggregate(alldata$cover.mn, list(plot = plot, distance = distance, lat = lat, long = long), FUN = length)
detach(alldata)
summary(rich.total)
# rename the x columns created by aggregate
names(rich.total)[names(rich.total) == "x"] <- "rich"
summary(rich.total)
richness <- read.csv("Capstone-richness-20131010.csv")
# Split the richnesses into native and adventive with the subset function
rich.adventive <- subset(richness, native == "adventive")
rich.native <- subset(richness, native == "native")
# Build models for all 3 variables
# Check normality of each vector
hist(rich.native$rich)
hist(rich.adventive$rich)
hist(rich.total$rich)
hist(rich.native$distance) # This is good
hist(log(rich.adventive$rich))  # This is much better. We should be able to do accurate comparisons now
rich.adventive$ln.rich <- log(rich.adventive$rich + .001)
plot(rich.adventive$distance, log(rich.adventive$rich), main="Adventive SR vs. Distance", ylab="Adventive Richness", xlab="Distance from Center of Urban Matrix")
abline(lm(log(rich.adventive$rich+.001)~rich.adventive$distance), col="red")
plot(rich.native$distance, rich.native$rich, main="Native SR vs. Distance", ylab="Native Richness", xlab="Distance from Center of Urban Matrix")
abline(lm(rich.native$rich~rich.native$distance), col="green")
plot(rich.total$distance, rich.total$rich, main="Total SR vs. Distance", ylab="Total Richness", xlab="Distance from Center of Urban Matrix")
abline(lm(rich.total$rich~rich.total$distance), col="blue")
# Create linear models and check that the significances are important
lm_native.distance <- lm(rich.native$rich ~ rich.native$distance)
lm_adventive.distance <- lm(rich.adventive$rich ~ rich.adventive$distance)
lm_total.distance <- lm(rich.total$rich ~ rich.adventive$distance)
lm_native.adventive <- lm(rich.native$rich ~ rich.adventive$rich)
anova(lm_native.distance) # Significant P < 0.0004674
anova(lm_adventive.distance)
anova(lm_total.distance)
anova(lm_native.adventive)  # Significant P < 0.0000000001942
summary(lm_native.distance) # F: 12.75
summary(lm_adventive.distance) # F:0.1836
summary(lm_total.distance) # F: 1.357
summary(lm_native.adventive) # F: 46.12
soil <- read.csv("pcap-soil-chemistry.csv")
summary(soil)
# Add in values of N.tot into the already created richness matrix so that we have a dataframe containing all variables
soildata <- merge(richness, soil)
summary(soildata)
# Separate out the soil data based on native and adventive plants so that we can see how the soil characteristics affect both
soildata.adventive <- subset(soildata, native == "adventive")
soildata.native <- subset(soildata, native == "native")
summary(soildata.native)
summary(soildata.adventive)
# Check on the normality of NO Data
par(mfcol=c(2,1))
# These should have the same distributions because they are filtered out by plot number and separated only by nativity status
hist(log(soildata.native$N.tot))
hist(log(soildata.adventive$N.tot))
hist(log(soildata.native$N.tot))
hist(log(soildata.adventive$N.tot))
# Plot the Native and Adventive species against their associated N.tot
# Adventive (shows a negative linear relationship"
plot(soildata.adventive$N.tot, soildata.adventive$rich, main="Adventive Species Richness vs. Available Nitrogen", xlab="Available N", ylab = "Adventive Species Richness")
#abline(lm(soildata.adventive$rich~soildata.adventive$N.tot), col="blue")
# Create Models to determine if our fit is good enough
par(mfcol=c(1,1))
plot(soildata.adventive$N.tot, soildata.adventive$rich, main="Adventive Species Richness vs. Available Nitrogen", xlab="Available N", ylab = "Adventive Species Richness")
model_N.adventive <- lm(soildata.adventive$rich~soildata.adventive$N.tot)
anova(model_N.adventive)
summary(model_N.adventive)
model_N.native <- lm(log(soildata.native$rich)~soildata.native$N.tot)
anova(model_N.native)
plot(soildata.native$N.tot, log(soildata.native$rich), main="Native Species Richness vs. Available Nitrogen", xlab="Available N", ylab = "Native Species Richness")
abline(lm(log(soildata.native$rich)~soildata.native$N.tot), col="blue")
summary(model_N.native)
